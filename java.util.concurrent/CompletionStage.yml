version: '1.1'
languages:
  java:
    packages:
      java.util.concurrent:
        CompletionStage:
          methods:
          - name: acceptEither
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: acceptEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: acceptEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: applyToEither
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Function<? super T, U>
                full: java.util.function.Function<? super T, U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: applyToEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Function<? super T, U>
                full: java.util.function.Function<? super T, U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: applyToEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends T>
                full: java.util.concurrent.CompletionStage<? extends T>
            - name: arg1
              type:
                basic: Function<? super T, U>
                full: java.util.function.Function<? super T, U>
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: exceptionally
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends T>
                full: java.util.function.Function<java.lang.Throwable, ? extends T>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: exceptionallyAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends T>
                full: java.util.function.Function<java.lang.Throwable, ? extends T>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: exceptionallyAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends T>
                full: java.util.function.Function<java.lang.Throwable, ? extends T>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: exceptionallyCompose
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends CompletionStage<T>>
                full: java.util.function.Function<java.lang.Throwable, ? extends java.util.concurrent.CompletionStage<T>>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: exceptionallyComposeAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends CompletionStage<T>>
                full: java.util.function.Function<java.lang.Throwable, ? extends java.util.concurrent.CompletionStage<T>>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: exceptionallyComposeAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<Throwable, ? extends CompletionStage<T>>
                full: java.util.function.Function<java.lang.Throwable, ? extends java.util.concurrent.CompletionStage<T>>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: handle
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiFunction<? super T, Throwable, ? extends U>
                full: java.util.function.BiFunction<? super T, java.lang.Throwable,
                  ? extends U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: handleAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiFunction<? super T, Throwable, ? extends U>
                full: java.util.function.BiFunction<? super T, java.lang.Throwable,
                  ? extends U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: handleAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiFunction<? super T, Throwable, ? extends U>
                full: java.util.function.BiFunction<? super T, java.lang.Throwable,
                  ? extends U>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: runAfterBoth
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: runAfterBothAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: runAfterBothAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: runAfterEither
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: runAfterEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: runAfterEitherAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<?>
                full: java.util.concurrent.CompletionStage<?>
            - name: arg1
              type:
                basic: Runnable
                full: java.lang.Runnable
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAccept
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAcceptAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAcceptAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Consumer<? super T>
                full: java.util.function.Consumer<? super T>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAcceptBoth
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiConsumer<? super T, ? super U>
                full: java.util.function.BiConsumer<? super T, ? super U>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAcceptBothAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiConsumer<? super T, ? super U>
                full: java.util.function.BiConsumer<? super T, ? super U>
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenAcceptBothAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiConsumer<? super T, ? super U>
                full: java.util.function.BiConsumer<? super T, ? super U>
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenApply
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends U>
                full: java.util.function.Function<? super T, ? extends U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenApplyAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends U>
                full: java.util.function.Function<? super T, ? extends U>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenApplyAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends U>
                full: java.util.function.Function<? super T, ? extends U>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenCombine
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiFunction<? super T, ? super U, ? extends V>
                full: java.util.function.BiFunction<? super T, ? super U, ? extends
                  V>
            return:
              type:
                basic: CompletionStage<V>
                full: java.util.concurrent.CompletionStage<V>
          - name: thenCombineAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiFunction<? super T, ? super U, ? extends V>
                full: java.util.function.BiFunction<? super T, ? super U, ? extends
                  V>
            return:
              type:
                basic: CompletionStage<V>
                full: java.util.concurrent.CompletionStage<V>
          - name: thenCombineAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: CompletionStage<? extends U>
                full: java.util.concurrent.CompletionStage<? extends U>
            - name: arg1
              type:
                basic: BiFunction<? super T, ? super U, ? extends V>
                full: java.util.function.BiFunction<? super T, ? super U, ? extends
                  V>
            - name: arg2
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<V>
                full: java.util.concurrent.CompletionStage<V>
          - name: thenCompose
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends CompletionStage<U>>
                full: java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenComposeAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends CompletionStage<U>>
                full: java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>>
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenComposeAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Function<? super T, ? extends CompletionStage<U>>
                full: java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<U>
                full: java.util.concurrent.CompletionStage<U>
          - name: thenRun
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenRunAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Runnable
                full: java.lang.Runnable
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: thenRunAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: Runnable
                full: java.lang.Runnable
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<Void>
                full: java.util.concurrent.CompletionStage<java.lang.Void>
          - name: toCompletableFuture
            modifiers:
            - public
            return:
              type:
                basic: CompletableFuture<T>
                full: java.util.concurrent.CompletableFuture<T>
          - name: whenComplete
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiConsumer<? super T, Throwable>
                full: java.util.function.BiConsumer<? super T, ? super java.lang.Throwable>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: whenCompleteAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiConsumer<? super T, Throwable>
                full: java.util.function.BiConsumer<? super T, ? super java.lang.Throwable>
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          - name: whenCompleteAsync
            modifiers:
            - public
            parameters:
            - name: arg0
              type:
                basic: BiConsumer<? super T, Throwable>
                full: java.util.function.BiConsumer<? super T, ? super java.lang.Throwable>
            - name: arg1
              type:
                basic: Executor
                full: java.util.concurrent.Executor
            return:
              type:
                basic: CompletionStage<T>
                full: java.util.concurrent.CompletionStage<T>
          javaType: interface
          extends: null
